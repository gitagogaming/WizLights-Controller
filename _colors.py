## COLORS
def rrggbbaa_to_rgb(color):
    """ 
    Convert a color string from the format "rrggbbaa" to a tuple of integers
    """
    # Extract the red, green, and blue values from the color string
    red = color[0:2]
    green = color[2:4]
    blue = color[4:6]
    
    # Convert the red, green, and blue values from hexadecimal to decimal
    red = int(red, 16)
    green = int(green, 16)
    blue = int(blue, 16)
    # Return the converted values as a tuple
    return (red, green, blue)



COLOR_DICT = {
    "0": (255, 0, 0),
    "1": (255, 0, 0),
    "2": (255, 16, 0),
    "3": (255, 32, 0),
    "4": (255, 48, 0),
    "5": (255, 64, 0),
    "6": (255, 80, 0),
    "7": (255, 96, 0),
    "8": (255, 112, 0),
    "9": (255, 128, 0),
    "10": (255, 144, 0),
    "11": (255, 160, 0),
    "12": (255, 176, 0),
    "13": (255, 192, 0),
    "14": (255, 208, 0),
    "15": (255, 224, 0),
    "16": (255, 240, 0),
    "17": (255, 255, 0),
    "18": (239, 255, 0),
    "19": (223, 255, 0),
    "20": (207, 255, 0),
    "21": (191, 255, 0),
    "22": (175, 255, 0),
    "23": (159, 255, 0),
    "24": (143, 255, 0),
    "25": (127, 255, 0),
    "26": (111, 255, 0),
    "27": (95, 255, 0),
    "28": (79, 255, 0),
    "29": (63, 255, 0),
    "30": (47, 255, 0),
    "31": (31, 255, 0),
    "32": (15, 255, 0),
    "33": (0, 255, 0),
    "34": (0, 255, 16),
    "35": (0, 255, 32),
    "36": (0, 255, 48),
    "37": (0, 255, 64),
    "38": (0, 255, 80),
    "39": (0, 255, 96),
    "40": (0, 255, 112),
    "41": (0, 255, 128),
    "42": (0, 255, 144),
    "43": (0, 255, 160),
    "44": (0, 255, 176),
    "45": (0, 255, 192),
    "46": (0, 255, 208),
    "47": (0, 255, 224),
    "48": (0, 255, 240),
    "49": (0, 255, 255),
    "50": (0, 239, 255),
    "51": (0, 223, 255),
    "52": (0, 207, 255),
    "53": (0, 191, 255),
    "54": (0, 175, 255),
    "55": (0, 159, 255),
    "56": (0, 143, 255),
    "57": (0, 127, 255),
    "58": (0, 111, 255),
    "59": (0, 95, 255),
    "59": (0, 95, 255),
    "60": (0, 79, 255),
    "61": (0, 63, 255),
    "62": (0, 47, 255),
    "63": (0, 31, 255),
    "64": (0, 15, 255),
    "65": (0, 0, 255),
    "66": (16, 0, 255),
    "67": (32, 0, 255),
    "68": (48, 0, 255),
    "69": (64, 0, 255),
    "70": (80, 0, 255),
    "71": (96, 0, 255),
    "72": (112, 0, 255),
    "73": (128, 0, 255),
    "74": (144, 0, 255),
    "75": (160, 0, 255),
    "76": (176, 0, 255),
    "77": (192, 0, 255),
    "78": (208, 0, 255),
    "79": (224, 0, 255),
    "80": (240, 0, 255),
    "81": (255, 0, 255),
    "82": (255, 0, 239),
    "83": (255, 0, 223),
    "84": (255, 0, 207),
    "85": (255, 0, 191),
    "86": (255, 0, 175),
    "87": (255, 0, 159),
    "88": (255, 0, 143),
    "89": (255, 0, 127),
    "90": (255, 0, 111),
    "91": (255, 0, 95),
    "92": (255, 0, 79),
    "93": (255, 0, 63),
    "94": (255, 0, 47),
    "95": (255, 0, 31),
    "96": (255, 0, 15),
    "97": (255, 0, 0),
    "98": (255, 16, 0),
    "99": (255, 32, 0),
    "100": (255, 48, 0)
}


COLOR_CODES = {
    'Cold White': {'3100': {'RGB': (255, 139, 57), 'HEX': 'ff8b39'},
                    '3500': {'RGB': (255, 182, 78), 'HEX': 'ffb64e'},
                    '4000': {'RGB': (255, 218, 122), 'HEX': 'ffda7a'},
                    '4100': {'RGB': (255, 218, 122), 'HEX': 'ffda7a'}},
    'Warm White': {'2200': {'RGB': (255, 115, 23), 'HEX': 'ff7317'},
                    '2700': {'RGB': (255, 139, 39), 'HEX': 'ff8b27'},
                    '3000': {'RGB': (255, 139, 57), 'HEX': 'ff8b39'}},
    'Daylight':   {'4700': {'RGB': (255, 234, 144), 'HEX': 'ffe190'},
                    '5000': {'RGB': (255, 248, 167), 'HEX': 'fff8a7'},
                    '6500': {'RGB': (255, 249, 253), 'HEX': 'fff9fd'}}}






COLOR_CODES2 = {
    '2700': {'RGB': (255, 139, 39), 'HEX': 'ff8b27'},
    '3100': {'RGB': (255, 139, 57), 'HEX': 'ff8b39'},
    '3500': {'RGB': (255, 182, 78), 'HEX': 'ffb64e'},
    '4000': {'RGB': (255, 218, 122), 'HEX': 'ffda7a'},
    '4100': {'RGB': (255, 218, 122), 'HEX': 'ffda7a'},
    '2200': {'RGB': (255, 115, 23), 'HEX': 'ff7317'},
    '2700': {'RGB': (255, 139, 39), 'HEX': 'ff8b27'},
    '3000': {'RGB': (255, 139, 57), 'HEX': 'ff8b39'},
    '4700': {'RGB': (255, 234, 144), 'HEX': 'ffe190'},
    '5000': {'RGB': (255, 248, 167), 'HEX': 'fff8a7'},
    '5500': {'RGB': (255, 248, 200), 'HEX': 'fff8f7'},
    '6500': {'RGB': (255, 249, 253), 'HEX': 'fff9fd'}}



def get_closest_kelvin(kelvin: int) -> int:
    # Get a list of all the kelvin values in the COLOR_CODES2 dictionary
    kelvin_values = list(map(int, COLOR_CODES2.keys()))

    # Find the closest matching kelvin value
    closest_kelvin = min(kelvin_values, key=lambda x: abs(x - kelvin))
    
    print(f"Closest kelvin value: {closest_kelvin}")

   # return closest_kelvin
    return COLOR_CODES2[str(closest_kelvin)]['RGB']










import base64
from PIL import Image, ImageDraw

def create_empty_image_base64():
    # Create an image with a gray fill and 10% transparency
    image = Image.new('RGBA', (128, 128), (128, 128, 128, 25))
    
    # Draw the image
    draw = ImageDraw.Draw(image)
    
    # Encode the image in base64 format
    image_base64 = base64.b64encode(image.tobytes()).decode('utf-8')
    
    return image_base64



